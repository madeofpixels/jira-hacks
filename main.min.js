
function makePositionSmartChecklist(){const _positionSmartChecklist=function(){const smartChecklist=document.querySelector('div[class="sc-185kjqv-0 diozqf"]');if(smartChecklist===null)return false;const smartChecklistWrapper=smartChecklist.closest('.ei7vuq-0.LlqtS');const anchorElt=document.querySelector('div[class="nla5ek-1 gRMXld"]');anchorElt.insertAdjacentElement('afterend',smartChecklistWrapper);}
return({init:()=>{setTimeout(_positionSmartChecklist,1000);}});}
function makeCustomTemplateInjector(){const CREATE_ISSUE_MUTATION_CONFIG={attributes:true,childList:true,subtree:true};let currProjectCode;const _fetchTemplates=async function(projectCode,_callback=undefined){if(localStorage.getItem('templates-created-on-date')!==null){const templatesCreatedOnDate=new Date(localStorage.getItem('templates-created-on-date'));const currDate=new Date();const diffDatesByTime=currDate.getTime()-templatesCreatedOnDate.getTime();const diffDatesByDays=diffDatesByTime/(1000*3600*24);if(diffDatesByDays>7){for(key in localStorage){if(key.indexOf('template-')==0){localStorage.removeItem(key);}}
localStorage.setItem('templates-created-on-date',new Date());}}else{localStorage.setItem('templates-created-on-date',new Date());}
if(localStorage.getItem('template-'+projectCode)!==null||USER_TEMPLATE_URLS[projectCode]==undefined){typeof(_callback)=='function'&&_callback(projectCode);return;}
const requestURL=(USER_TEMPLATE_URLS[projectCode]==undefined)?USER_TEMPLATE_URLS['DEFAULT']:USER_TEMPLATE_URLS[projectCode];const request=new Request(requestURL);try{const response=await fetch(request);const jsonResponse=await response.json();if(typeof jsonResponse=='object'){localStorage.setItem('template-'+projectCode,JSON.stringify(jsonResponse));}
typeof(_callback)=='function'&&_callback(projectCode);}catch(e){console.error('Error fetching templates: ',e);}}
const _listenForCreateIssueMutations=function(e){setTimeout(()=>{const createIssueMutationNode=document.getElementById('issue-create-modal-dropzone-container');if(createIssueMutationNode!=null){createIssueObserver.observe(createIssueMutationNode,CREATE_ISSUE_MUTATION_CONFIG);}},1);}
const _getIssueTemplate=function(){const projectCodePicker=document.getElementById('issue-create.ui.modal.create-form.project-picker.project-select');const lastCloseEllipseDivIndex=projectCodePicker.innerHTML.lastIndexOf(')</div>');const projectCodeFragment=projectCodePicker.innerHTML.slice(0,lastCloseEllipseDivIndex);const lastOpenEllipseIndex=projectCodeFragment.lastIndexOf('(');const selectedDDProjectCode=(projectCodeFragment&&projectCodeFragment.slice(lastOpenEllipseIndex+1))||null;if(selectedDDProjectCode&&selectedDDProjectCode!=currProjectCode){const createDescriptionField=document.querySelector('.ak-editor-content-area div[aria-label="Main content area"]');createDescriptionField.innerHTML='Loading template...';_fetchTemplates(selectedDDProjectCode,_injectIssueTemplate);}else{_injectIssueTemplate(currProjectCode);}}
const _injectIssueTemplate=function(projectCode){const createDescriptionField=document.querySelector('.ak-editor-content-area div[aria-label="Main content area"]');if(localStorage.getItem('template-'+projectCode)==null){createDescriptionField.innerHTML='';return;}
const issueTypePicker=document.getElementById('issue-create.ui.modal.create-form.type-picker.issue-type-select').querySelector('.css-hkzqy0-singleValue > div > div:nth-child(2) > div');const selectedIssueType=(issueTypePicker&&issueTypePicker.innerHTML)||null;const currProjectTemplates=JSON.parse(localStorage.getItem('template-'+projectCode));if(selectedIssueType!=null&&currProjectTemplates[selectedIssueType]!=undefined){createDescriptionField.innerHTML=currProjectTemplates[selectedIssueType];}else{createDescriptionField.innerHTML='';}
setTimeout(()=>{document.getElementById('issue-create.ui.modal.modal-body').scrollTop=0;},1);}
const _onCreateIssueMutation=function(mutationList,createIssueObserver){for(const mutation of mutationList){if(mutation.target.className.includes('ak-editor-content-area')&&mutation.type=='childList'){_getIssueTemplate();return;}
if(mutation.target.className=="ua-chrome"&&mutation.removedNodes.length>0){const modalBody=document.getElementById('issue-create.ui.modal.modal-body');if(modalBody==null){createIssueObserver.disconnect();}
return;}}}
const createIssueObserver=new MutationObserver(_onCreateIssueMutation);const _onUpdate=function(){let newProjectPathname=window.location.pathname.split('projects/');let newProjectCode=newProjectPathname.length==1?undefined:newProjectPathname[1].split('/')[0];setTimeout(()=>{document.getElementById('createGlobalItem').addEventListener('click',_listenForCreateIssueMutations);document.getElementById('createGlobalItemIconButton').addEventListener('click',_listenForCreateIssueMutations);},1);if(newProjectCode==undefined){return;}
if(newProjectCode!=currProjectCode){currProjectCode=newProjectCode;_fetchTemplates(currProjectCode);}}
const _init=function(){_onUpdate();window.addEventListener('locationchange',_onUpdate);}
return({init:()=>{_init();}});}
function makeFilterBadges(){const BOARD_MUTATION_CONFIG={attributes:false,childList:true,subtree:true};let labelsAndStatusesToFiltersMap={};let boardMutationNode;let isBoardUpdateInProgress=false;let quickFiltersSection;let quickFiltersToggle;let currProjectPathname;const _createBadge=function(count){const badge=document.createElement('span');badge.classList.add('badge');badge.innerHTML=count;return badge;}
const _getCardLabelAndStatusCounts=function(){for(const[label,props]of Object.entries(labelsAndStatusesToFiltersMap)){props.count=0;}
const allCardLabels=document.querySelectorAll('span[data-tooltip^="Labels:"]');allCardLabels.forEach(cardLabels=>{cardLabels.outerText.split(', ').forEach(label=>{labelsAndStatusesToFiltersMap[label]&&labelsAndStatusesToFiltersMap[label].count++;});});const allCardStatuses=document.querySelectorAll('span[data-tooltip^="Status:"]');allCardStatuses.forEach(status=>{labelsAndStatusesToFiltersMap[status.outerText]&&labelsAndStatusesToFiltersMap[status.outerText].count++;});}
const _addBadgesToFilters=function(){let currBadge;let filterElt;for(const[label,props]of Object.entries(labelsAndStatusesToFiltersMap)){filterElt=document.evaluate('.//span[text()="'+props.filterName+'"]',document.querySelector('#ghx-quick-filters'),null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;if(filterElt==null){continue;}
if(props.count>0){if(filterElt.childNodes.length==1){currBadge=_createBadge(props.count);props.badge=currBadge;filterElt.appendChild(props.badge);}else{props.badge.innerHTML=props.count;}}else{if(filterElt.childNodes.length>1){filterElt.removeChild(props.badge);props.badge=null;}}}}
const _enableBoardObserver=function(){boardMutationNode=document.getElementById('ghx-content-main');boardMutationNode&&boardObserver.observe(boardMutationNode,BOARD_MUTATION_CONFIG);}
const _onBoardMutation=function(mutationList,boardObserver){if(isBoardUpdateInProgress){return;}
boardObserver.disconnect();_onUpdate();}
const boardObserver=new MutationObserver(_onBoardMutation);const _getFilterNames=function(){let filterButtons=document.querySelectorAll('#ghx-quick-filters ul:nth-child(2) button');filterButtons=(filterButtons.length==0)?document.querySelectorAll('#ghx-quick-filters ul:nth-child(1) li:nth-child(3) button'):filterButtons;labelsAndStatusesToFiltersMap={};for(const[labelOrStatusName,filterName]of Object.entries(USER_LABELS_AND_STATUSES_TO_FILTERS)){labelsAndStatusesToFiltersMap[labelOrStatusName]={filterName:filterName,badge:null,count:0};}
filterButtons.forEach(filterButton=>{if(!Object.values(USER_LABELS_AND_STATUSES_TO_FILTERS).includes(filterButton.outerText)){labelsAndStatusesToFiltersMap[filterButton.outerText]={filterName:filterButton.outerText,badge:null,count:0};}});}
const _onUpdate=function(){if(isBoardUpdateInProgress){return;}
isBoardUpdateInProgress=true;setTimeout(()=>{quickFiltersSection=document.querySelector('#ghx-quick-filters ul:first-child');quickFiltersToggle=document.evaluate("//button[contains(., 'Quick filters')]",quickFiltersSection,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue;if(quickFiltersToggle){let filterButtons=document.querySelectorAll('#ghx-quick-filters ul:nth-child(2) button');if(!filterButtons.length){quickFiltersToggle.click();_getFilterNames();}}
if(currProjectPathname==null||currProjectPathname!=window.location.pathname){currProjectPathname=window.location.pathname;_getFilterNames();}
const filterNodesInDOM=document.querySelectorAll('#ghx-quick-filters ul').length>=2;if(filterNodesInDOM){_getCardLabelAndStatusCounts();_addBadgesToFilters();}
isBoardUpdateInProgress=false;_enableBoardObserver()},1250);}
const _init=function(e){_onUpdate();window.addEventListener('locationchange',_onUpdate);}
return({init:()=>{_init();}});};(function(){let pushState=history.pushState;let replaceState=history.replaceState;history.pushState=function(){pushState.apply(history,arguments);window.dispatchEvent(new Event('pushstate'));window.dispatchEvent(new Event('locationchange'));};history.replaceState=function(){replaceState.apply(history,arguments);window.dispatchEvent(new Event('replacestate'));window.dispatchEvent(new Event('locationchange'));};window.addEventListener('popstate',function(){window.dispatchEvent(new Event('locationchange'))});})();function makeJiraHacks(){const isJiraPage=document.getElementById('jira')!=null;let customTemplateInjector;let filterBadges;const initJiraHacks=function(){customTemplateInjector=makeCustomTemplateInjector();customTemplateInjector.init();filterBadges=makeFilterBadges();filterBadges.init();}
const _init=function(){if(isJiraPage){const positionSmartChecklist=makePositionSmartChecklist();positionSmartChecklist.init();window.onload=initJiraHacks;}}
return({init:()=>{_init();}});}
const jiraHacks=makeJiraHacks();jiraHacks.init();